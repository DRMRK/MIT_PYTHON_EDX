#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jul 30 10:22:14 2020

@author: Mukut Ranjan Kalita
"""
"""
Problem 1 - Is the Word Guessed
Please read the Hangman Introduction before starting this problem. 
We'll start by writing 3 simple functions that will help us easily code
the Hangman problem. First, implement the function isWordGuessed that takes 
in two parameters - a string, secretWord, and a list of letters, lettersGuessed.
This function returns a boolean - True if secretWord has been guessed
(ie, all the letters of secretWord are in lettersGuessed) and False otherwise.
"""
def isWordGuessed(secretWord,lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: boolean, True if all the letters of secretWord are in 
    lettersGuessed;False otherwise
    '''
    letrinsword = [c for c in secretWord]
    flag = 1
    for i in lettersGuessed:
        if i in letrinsword:
            flag=1
        else:
            flag =2
        if flag ==2:
            return False
print("Now the first prob: \n")
secretWord = 'apple'
lettersGuessed = ['e', 'i', 'k', 'p', 'r', 'e']
print(isWordGuessed(secretWord, lettersGuessed))

print('---------\n')
print("Now the second prob: \n")
"""
Problem 2 - Getting the User's Guess
Next, implement the function getGuessedWord that takes in two 
parameters - a string, secretWord, and a list of letters, lettersGuessed. 
This function returns a string that is comprised of letters and underscores,
based on what letters in lettersGuessed are in secretWord. 
This shouldn't be too different from isWordGuessed!
"""
def getGuessedWord(secretWord, lettersGuessed):
    letrinsword = [c for c in secretWord]
    pword=""
    for i in letrinsword:
        if i in lettersGuessed:
            pword+=i
        else:
            pword+='_'
    return(pword)    
   
lettersGuessed = ['e', 'i', 'k', 'p', 'r', 's']
print(getGuessedWord(secretWord, lettersGuessed))            

"""
Problem 3 - Printing Out all Available Letters
Next, implement the function getAvailableLetters that 
takes in one parameter - a list of letters, lettersGuessed. 
This function returns a string that is comprised of lowercase 
English letters - all lowercase English letters that are not in 
lettersGuessed."""
print('--------\n')
print('Now the third problem: \n')
def getAvailableLetters(lettersGuessed):
    import string
    s = string.ascii_lowercase
    for i in lettersGuessed:
        s1 = s.replace(i, '')
        s = s1
    return s
lettersGuessed = ['e', 'i', 'k', 'p', 'r', 's']
print(getAvailableLetters(lettersGuessed))    

"""
Problem 4 - The Game
0.0/15.0 points (graded)
Now you will implement the function hangman, which takes one parameter -
the secretWord the user is to guess. This starts up an interactive game
of Hangman between the user and the computer. Be sure you take advantage 
of the three helper functions, isWordGuessed, getGuessedWord, and
getAvailableLetters, that you've defined in the previous part.
"""

print("--------\n")
print("Now the 4th problem \n")
import random

WORDLIST_FILENAME = "words.txt"

def loadWords():
    """
    Returns a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = line.split()
    print("  ", len(wordlist), "words loaded.")
    return wordlist

def chooseWord(wordlist):
    """
    wordlist (list): list of words (strings)

    Returns a word from wordlist at random
    """
    return random.choice(wordlist)

# end of helper code
# -----------------------------------

# Load the list of words into the variable wordlist
# so that it can be accessed from anywhere in the program
wordlist = loadWords()


def hangman(secretWord):
    '''
    secretWord: string, the secret word to guess.

    Starts up an interactive game of Hangman.

    * At the start of the game, let the user know how many 
      letters the secretWord contains.

    * Ask the user to supply one guess (i.e. letter) per round.

    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computers word.

    * After each round, you should also display to the user the 
      partially guessed word so far, as well as letters that the 
      user has not yet guessed.

    Follows the other limitations detailed in the problem write-up.
    '''
    s = secretWord
    n_of_round = 3
    print('Welcome to the game, Hangman!')
    print("The word to guess is:",s)
    print('I am thinking of a word that is %s letters long' %len(s))
    lettersGuessed = ''
    while n_of_round >= 1:
        print('You have %s guesses left' %(n_of_round))
        guess = input('Please guess a letter: ')
        guess = guess.lower()
        if guess in lettersGuessed: 
            print('Oops! Youve already guessed that letter:')
            n_of_round -= 1
        if guess not in s:
            print('Oops! this letter is not in the word:')
            n_of_round -= 1
        else:
            lettersGuessed += guess
            word = getGuessedWord(secretWord, lettersGuessed)
            print(word)
            availableletters = getAvailableLetters(lettersGuessed)
            print('Available letters: ', availableletters)  
            if '_' not in word:
                print('Good guess: ',word)
                print('Congratulations, you won!')
                break
hangman(chooseWord(wordlist))

